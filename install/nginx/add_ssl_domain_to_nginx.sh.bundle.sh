set -e
# START-INCLUDE: ../common/utils.sh
slugify() {
echo $1 | iconv -t ascii//TRANSLIT | sed -r s/[~\^]+//g | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z
}

echo "$(date '+%Y-%m-%d %H:%M:%S') Finished ../common/utils.sh
# END-INCLUDE:  ../common/utils.sh
DATE=`date '+%Y-%m-%d %H:%M:%S'`
GENERATESTRING="# Generated by add_ssl_domain_to_nginx.sh ${DATE}"
if [[ $# -eq 0 ]] ; then
read -p 'Domain: ' DOMAINNAME
else
DOMAINNAME=$1
fi
SLUGIFYDOMAIN=$(slugify ${DOMAINNAME})
mkdir -p /etc/nginx/certs/
issue_cert() {
acme.sh --issue -d ${DOMAINNAME} --stateless --key-file /etc/nginx/certs/${DOMAINNAME}.key.pem --fullchain-file  /etc/nginx/certs/${DOMAINNAME}.cert.pem --reloadcmd "sudo service nginx reload"
}
title="You want to install SSL for ${DOMAIN}"
prompt="Pick an option:"
options=("Blank config" "Proxy Upstream" "Static Files")
echo "$title"
PS3="$prompt "
select opt in "${options[@]}" "Quit"; do
case "$REPLY" in
1 ) echo "You picked $opt which is option $REPLY";
issue_cert;
# START-RENDERING TEMPLATE 
regex='\$\{([a-zA-Z_][a-zA-Z_0-9]*)\}'
sudo echo "Rendering templates/nginx_empty.conf into /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf"
template=$(echo "JHtHRU5FUkFURVNUUklOR30Kc2VydmVyIHsKICAgIGxpc3RlbiA0NDMgc3NsIGh0dHAyOwogICAgc2VydmVyX25hbWUgICAke0RPTUFJTk5BTUV9OwogICAgYWNjZXNzX2xvZyAgIC92YXIvbG9nL25naW54LyR7U0xVR0lGWURPTUFJTn0uYWNjZXNzLmxvZzsKCiAgICBzc2xfY2VydGlmaWNhdGUgL2V0Yy9uZ2lueC9jZXJ0cy8ke0RPTUFJTk5BTUV9LmNlcnQucGVtOwogICAgc3NsX2NlcnRpZmljYXRlX2tleSAvZXRjL25naW54L2NlcnRzLyR7RE9NQUlOTkFNRX0ua2V5LnBlbTsKCiAgICBsb2NhdGlvbiAvIHsKCiAgICB9CgogICAgbG9jYXRpb24gfiAvXC4gewogICAgIGRlbnkgYWxsOwogICAgfQoKfQ==" | base64 --decode)
    while IFS= read -r line; do
        newline=$line
        while [[ "$newline" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
            LHS=${BASH_REMATCH[1]}
            RHS="$(eval echo ""$LHS"")"
            newline=${line//$LHS/$RHS}
        done
        echo "$newline"
    done < <(printf "%s\n" "$template") | sudo tee /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf > /dev/null 
# END-RENDERING TEMPLATE 
break;;
2 ) echo "You picked $opt which is option $REPLY";
read -p 'upstream ip: ' UPSTREAMIP;
issue_cert;
if [[ -z  UPSTREAMIP  ]] ;  then
UPSTREAMIP="127.0.0.1:9001";
fi
# START-RENDERING TEMPLATE 
regex='\$\{([a-zA-Z_][a-zA-Z_0-9]*)\}'
sudo echo "Rendering templates/nginx_upstream.conf into /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf"
template=$(echo "JHtHRU5FUkFURVNUUklOR30KdXBzdHJlYW0gdXBzdHJlYW0tJHtTTFVHSUZZRE9NQUlOfSB7CiAgICBzZXJ2ZXIgJHtVUFNUUkVBTUlQfTsKfQoKc2VydmVyIHsKICAgIGxpc3RlbiA0NDMgc3NsIGh0dHAyOwogICAgc2VydmVyX25hbWUgICAke0RPTUFJTk5BTUV9OwogICAgYWNjZXNzX2xvZyAgIC92YXIvbG9nL25naW54LyR7U0xVR0lGWURPTUFJTn0uYWNjZXNzLmxvZzsKCiAgICBzc2xfY2VydGlmaWNhdGUgL2V0Yy9uZ2lueC9jZXJ0cy8ke0RPTUFJTk5BTUV9LmNlcnQucGVtOwogICAgc3NsX2NlcnRpZmljYXRlX2tleSAvZXRjL25naW54L2NlcnRzLyR7RE9NQUlOTkFNRX0ua2V5LnBlbTsKCiAgICBsb2NhdGlvbiAvIHsKICAgICAgICBwcm94eV9zZXRfaGVhZGVyIEhvc3QgJGhvc3Q7CiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLVJlYWwtSVAgJHJlbW90ZV9hZGRyOwogICAgICAgIHByb3h5X3NldF9oZWFkZXIgWC1Gb3J3YXJkZWQtRm9yICRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOwogICAgICAgIHByb3h5X3NldF9oZWFkZXIgWC1Gb3J3YXJkZWQtUHJvdG8gJHNjaGVtZTsKCiAgICAgICAgcHJveHlfYnVmZmVyaW5nICAgICBvZmY7CiAgICAgICAgcHJveHlfcmVkaXJlY3QgICAgICBvZmY7CgogICAgICAgIHByb3h5X3Bhc3MgaHR0cDovL3Vwc3RyZWFtLSR7U0xVR0lGWURPTUFJTn07CiAgICB9CgogICAgbG9jYXRpb24gfiAvXC4gewogICAgIGRlbnkgYWxsOwogICAgfQoKfQ==" | base64 --decode)
    while IFS= read -r line; do
        newline=$line
        while [[ "$newline" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
            LHS=${BASH_REMATCH[1]}
            RHS="$(eval echo ""$LHS"")"
            newline=${line//$LHS/$RHS}
        done
        echo "$newline"
    done < <(printf "%s\n" "$template") | sudo tee /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf > /dev/null 
# END-RENDERING TEMPLATE 
break;;
3 ) echo "You picked $opt which is option $REPLY";
issue_cert;
# START-RENDERING TEMPLATE 
regex='\$\{([a-zA-Z_][a-zA-Z_0-9]*)\}'
sudo echo "Rendering templates/nginx_static.conf into /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf"
template=$(echo "JHtHRU5FUkFURVNUUklOR30Kc2VydmVyIHsKICAgIGxpc3RlbiA0NDMgc3NsIGh0dHAyOwogICAgc2VydmVyX25hbWUgICAke0RPTUFJTk5BTUV9OwogICAgYWNjZXNzX2xvZyAgIC92YXIvbG9nL25naW54LyR7U0xVR0lGWURPTUFJTn0uYWNjZXNzLmxvZzsKCiAgICBzc2xfY2VydGlmaWNhdGUgL2V0Yy9uZ2lueC9jZXJ0cy8ke0RPTUFJTk5BTUV9LmNlcnQucGVtOwogICAgc3NsX2NlcnRpZmljYXRlX2tleSAvZXRjL25naW54L2NlcnRzLyR7RE9NQUlOTkFNRX0ua2V5LnBlbTsKCiAgICBsb2NhdGlvbiAvIHsKICAgICAgIGFkZF9oZWFkZXIgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicgJyonOwogICAgICAgYWRkX2hlYWRlciAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycgJ0dFVCc7CiAgICAgICByb290IC92YXIvd3d3LyR7U0xVR0lGWURPTUFJTn0vOwogICAgICAgaW5kZXggaW5kZXguaHRtbDsKICAgIH0KCiAgICBsb2NhdGlvbiB+IC9cLiB7CiAgICAgZGVueSBhbGw7CiAgICB9Cgp9" | base64 --decode)
    while IFS= read -r line; do
        newline=$line
        while [[ "$newline" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
            LHS=${BASH_REMATCH[1]}
            RHS="$(eval echo ""$LHS"")"
            newline=${line//$LHS/$RHS}
        done
        echo "$newline"
    done < <(printf "%s\n" "$template") | sudo tee /etc/nginx/conf.d/${SLUGIFYDOMAIN}.conf > /dev/null 
# END-RENDERING TEMPLATE 
break;;
$(( ${#options[@]}+1 )) ) echo "Goodbye!"; break;;
*) echo "Invalid option. Try another one.";continue;;
esac
done

echo "$(date '+%Y-%m-%d %H:%M:%S') Finished /home/benoit/git/bash-install/install/nginx/add_ssl_domain_to_nginx.sh